<?php
/**
 * @copyright  Copyright (c) 2017, Net Inventors GmbH
 * @category   NetiTags
 * @author     bmueller
 */

namespace NetiTags\Service\Decorations;

use Doctrine\DBAL\Connection;
use NetiTags\Service\Tag\RelationCollectorInterface;
use Shopware\Bundle\AttributeBundle\Service\TableMapping as CoreService;

/**
 * Class AttributeTableMapping
 *
 * @package NetiTags\Service\Decorations
 */
class AttributeTableMapping extends CoreService
{
    /**
     * @var array
     */
    private $tables;

    /**
     * @var RelationCollectorInterface
     */
    private $relationCollector;

    /**
     * @var array
     */
    private $addedTables;

    /**
     * @var CoreService
     */
    private $coreService;

    /**
     * @var Connection
     */
    private $connection;

    /**
     * AttributeTableMapping constructor.
     *
     * @param CoreService                $coreService
     * @param Connection                 $connection
     * @param RelationCollectorInterface $relationCollector
     * @param                            $pathToTableEntityMappingFile
     */
    public function __construct(
        CoreService $coreService,
        Connection $connection,
        RelationCollectorInterface $relationCollector,
        $pathToTableEntityMappingFile
    ) {
        parent::__construct($connection);
        $this->coreService       = $coreService;
        $this->connection        = $connection;
        $this->relationCollector = $relationCollector;
        //$this->tables = include $pathToTableEntityMappingFile;
        //
        //foreach($this->relationCollector->getAll() as $relation) {
        //    $attributeTableName = $relation->getAttributeTableName();
        //    if(empty($attributeTableName)) {
        //        continue;
        //    }
        //
        //    if(isset($this->tables[$attributeTableName])) {
        //       continue;
        //    }
        //
        //    $this->tables[$attributeTableName] = array();
        //}
    }

    /**
     * @param string $table
     * @param string $name
     *
     * @return bool
     */
    public function isIdentifierColumn($table, $name)
    {
        return $this->coreService->isIdentifierColumn($table, $name); // TODO: Change the autogenerated stub
    }

    /**
     * @param string $table
     * @param string $name
     *
     * @return bool
     */
    public function isCoreColumn($table, $name)
    {
        return $this->coreService->isCoreColumn($table, $name); // TODO: Change the autogenerated stub
    }

    /**
     * @param $table
     *
     * @return null|string
     */
    public function getTableModel($table)
    {
        return $this->coreService->getTableModel($table); // TODO: Change the autogenerated stub
    }

    /**
     * @return string[]
     */
    public function getAttributeTables()
    {
        return $this->coreService->getAttributeTables(); // TODO: Change the autogenerated stub
    }

    /**
     * @param $table
     *
     * @return string
     */
    public function getTableForeignKey($table)
    {
        return $this->coreService->getTableForeignKey($table); // TODO: Change the autogenerated stub
    }

    /**
     * @param string $table
     *
     * @return bool
     */
    public function isAttributeTable($table)
    {
        return $this->coreService->isAttributeTable($table); // TODO: Change the autogenerated stub
    }

    /**
     * @param string $table
     * @param string $column
     *
     * @return bool
     */
    public function isTableColumn($table, $column)
    {
        return $this->coreService->isTableColumn($table, $column); // TODO: Change the autogenerated stub
    }

    /**
     * @param string $table
     *
     * @return array
     */
    public function getDependingTables($table)
    {
        return $this->coreService->getDependingTables($table); // TODO: Change the autogenerated stub
    }

    /**
     * @param string $table
     *
     * @return \Doctrine\DBAL\Schema\Column[]
     */
    public function getTableColumns($table)
    {
        return $this->coreService->getTableColumns($table); // TODO: Change the autogenerated stub
    }
}
